import java_cup.runtime.*;
import java.util.ArrayList;

action code {:
    boolean declaracion = false;
    String cast = "";
    ArrayList<String> array;
:}


terminal PYC, AP, CP, IF, ELSE, WHILE, DO, FOR, ALL, CLL, PRINT, COMA, AC, CC;
terminal MAS, MENOS, POR, DIV, MENOSUNARIO, ASIG;
terminal IGUAL, DISTINTO, MAYOR, MENOR, MENOROIGUAL, MAYOROIGUAL;
terminal AND, OR, NEG;
terminal INT, FLOAT, CHAR, STRING, BOOLEAN;
terminal CINT, CFLOAT, CCHAR;
terminal PUNTO, LENGTH;
terminal String IDENT, ENTERO, REAL, CHARTEXT, STRINGTEXT, TRUE, FALSE;


non terminal starter, lista_sent, sent, else, declaracion, arrayLlaves;
non terminal lista_variables_int, item_int, lista_variables_float, item_float, lista_variables_char, item_char;
non terminal lista_variables_string, item_string, lista_variables_boolean, item_boolean;
non terminal String exp, asignacion, while, if, do, for, valor_booleano;

precedence right ASIG;
precedence left OR;
precedence left AND;
precedence right NEG;
precedence left IGUAL, DISTINTO, MAYOR, MENOR, MENOROIGUAL, MAYOROIGUAL;
precedence left MAS, MENOS;
precedence left POR, DIV;
precedence right CINT, CFLOAT, CCHAR;
precedence right MENOSUNARIO;
precedence nonassoc IF;
precedence nonassoc ELSE;


/*GRAMMAR*/
start with starter;

starter ::=   lista_sent  {: Compilador.imprimirResultados(); :}
        ;
 
lista_sent  ::= lista_sent sent
            |   sent
            ;

sent    ::= exp PYC
        |   if:etiq AP exp:e CP {: Compilador.pintarEtiqueta(Compilador.getEtTrue(e)); :}
                        sent {: Compilador.goTo(etiq); Compilador.pintarEtiqueta(Compilador.getEtFalse(e)); :}
                        else {: Compilador.pintarEtiqueta(etiq); :}
        |   while:etiq {: Compilador.pintarEtiqueta(etiq); :} AP exp:e CP {: Compilador.pintarEtiqueta(Compilador.getEtTrue(e)); :} 
                                                                    sent {: Compilador.goTo(etiq); Compilador.pintarEtiqueta(Compilador.getEtFalse(e)); :}
        |   do:etiq {: Compilador.pintarEtiqueta(etiq); :} sent WHILE AP exp:e CP PYC {: Compilador.pintarEtiqueta(Compilador.getEtTrue(e));
                                                                                         Compilador.goTo(etiq); Compilador.pintarEtiqueta(Compilador.getEtFalse(e)); :}
        |   for:tupla AP exp:e1 {: Compilador.pintarEtiqueta(Compilador.getEtTrue(tupla)); :} PYC 
                            exp:e2 {: Compilador.pintarEtiqueta(Compilador.getEtFalse(tupla)); :} PYC 
                            exp:e3 {: Compilador.goTo(Compilador.getEtTrue(tupla)); Compilador.pintarEtiqueta(Compilador.getEtTrue(e2)); :} CP 
                            sent {: Compilador.goTo(Compilador.getEtFalse(tupla)); Compilador.pintarEtiqueta(Compilador.getEtFalse(e2)); :}
        |   ALL lista_sent CLL
        |   PRINT AP exp:e CP PYC {: Compilador.printSupremo(e); cast = ""; :}
        |   PRINT AP ALL {: array = new ArrayList<>(); :} arrayLlaves CLL CP PYC {: Compilador.printArrayLlaves(array); array.clear(); :}
        |   declaracion {: declaracion = false; :} PYC
        ;

else    ::= ELSE sent
        |
        ;
         
exp ::= exp:e1 MAS exp:e2 {: RESULT = Compilador.operacion(e1, e2, "+", cast); :}
    |   exp:e1 MENOS exp:e2 {: RESULT = Compilador.operacion(e1, e2, "-", cast); :}
    |   exp:e1 DIV exp:e2 {: RESULT = Compilador.operacion(e1, e2, "/", cast); :}
    |   exp:e1 POR exp:e2 {: RESULT = Compilador.operacion(e1, e2, "*", cast); :}
    |   MENOS exp:e {: RESULT = Compilador.menosUnario(e); :} %prec MENOSUNARIO
    |   AP exp:e CP {: RESULT = e;:}
    |   asignacion:a {: RESULT = a; :}
    |   IDENT:i {: Compilador.checkDeclaracion("asignacion", i); 
                   if(!Compilador.getTypeDefinitivo(i).equals("boolean")) RESULT = i; 
                   else RESULT = Compilador.pintarIf("1", i, "igual"); :}
    |   ENTERO:e {: RESULT = e; :}
    |   REAL:e  {: RESULT = e; :}
    |   CHARTEXT:e {: RESULT = e; :}
    |   STRINGTEXT:e {: RESULT = e; :}
    |   exp:e1 IGUAL exp:e2 {: RESULT = Compilador.pintarIf(e1, e2, "igual"); :}
    |   exp:e1 DISTINTO exp:e2 {: RESULT = Compilador.pintarIf(e1, e2, "distinto"); :}
    |   exp:e1 MENOR exp:e2 {: RESULT = Compilador.pintarIf(e1, e2, "menor"); :}
    |   exp:e1 MAYOR exp:e2 {: RESULT = Compilador.pintarIf(e1, e2, "mayor"); :}
    |   exp:e1 MENOROIGUAL exp:e2 {: RESULT = Compilador.pintarIf(e1, e2, "menoroigual"); :}
    |   exp:e1 MAYOROIGUAL exp:e2 {: RESULT = Compilador.pintarIf(e1, e2, "mayoroigual"); :}
    |   exp:e1 AND {: Compilador.pintarEtiqueta(Compilador.getEtTrue(e1)); :} 
                   exp:e2 {: RESULT = e2; Compilador.pintarEtiqueta(Compilador.getEtFalse(e1)); Compilador.goTo(Compilador.getEtFalse(e2)); :}
    |   exp:e1 OR {: Compilador.pintarEtiqueta(Compilador.getEtFalse(e1)); :} 
                  exp:e2 {: RESULT = e2; Compilador.pintarEtiqueta(Compilador.getEtTrue(e1)); Compilador.goTo(Compilador.getEtTrue(e2)); :}
    |   NEG exp:e {: RESULT = Compilador.cambiarEtiqueta(e); :}
    |   CFLOAT {: cast = "(float)"; :} exp:e {: RESULT = e;:}
    |   CINT {: :} exp:e {:cast = "(int)";  RESULT = Compilador.newVar(); Compilador.asigInt(RESULT, e); cast=""; :}
    |   CCHAR {: cast = "(char)"; :} exp:e {: RESULT = Compilador.newVar(); Compilador.declarar(RESULT, "char"); Compilador.asigAlternativo(RESULT, e, cast); cast=""; :}
    |   IDENT:i AC exp:e CC {: RESULT = Compilador.posicionArray(i, e); :}
    |   IDENT:i PUNTO LENGTH {: RESULT = i + "_length"; :}
    |   valor_booleano:v {: RESULT = v; :}
    |   {::}
    ;

declaracion ::= INT {: declaracion = true; :} lista_variables_int
            |   FLOAT {: declaracion = true; :} lista_variables_float
            |   CHAR {: declaracion = true; :} lista_variables_char
            |   STRING {: declaracion = true; :} lista_variables_string
            |   BOOLEAN {: declaracion = true; :} lista_variables_boolean
            ;

lista_variables_int ::= item_int COMA lista_variables_int
                    |   item_int
                    ;

lista_variables_float   ::= item_float COMA lista_variables_float
                    |   item_float
                    ;

lista_variables_char   ::= item_char COMA lista_variables_char
                    |   item_char
                    ;

lista_variables_string   ::= item_string COMA lista_variables_string
                    |   item_string
                    ;

lista_variables_boolean ::= item_boolean COMA lista_variables_boolean
                        |   item_boolean
                        ;

item_int    ::= IDENT:i {: Compilador.declarar(i, "int"); :}
            |   IDENT:i ASIG exp:e {: Compilador.declarar(i, "int"); Compilador.asigAlternativo(i, e, cast); cast = ""; :}
            |   IDENT:i AC ENTERO:tam CC {: Compilador.declararArray(i, "int", tam); :}
            |   IDENT:i AC ENTERO:tam CC ASIG exp:e {: Compilador.declararArray(i, "int", tam); Compilador.asigArray(i, tam, e); :}
            |   IDENT:i AC ENTERO:tam CC ASIG ALL {: array = new ArrayList<>(); :} arrayLlaves CLL {: Compilador.declararArray(i, "int", tam); 
                                                                                                    Compilador.inicializarArray(i, array); array.clear(); :}
            ;

item_float    ::= IDENT:i {: Compilador.declarar(i, "float"); :}
            |   IDENT:i ASIG exp:e {: Compilador.declarar(i, "float"); Compilador.asigAlternativo(i, e, cast); cast = ""; :}
            |   IDENT:i AC ENTERO:tam CC {: Compilador.declararArray(i, "float", tam); :}
            |   IDENT:i AC ENTERO:tam CC ASIG exp:e {: Compilador.declararArray(i, "float", tam); Compilador.asigArray(i, tam, e); :}
            |   IDENT:i AC ENTERO:tam CC ASIG ALL {: array = new ArrayList<>(); :} arrayLlaves CLL {: Compilador.declararArray(i, "float", tam); 
                                                                                                    Compilador.inicializarArray(i, array); array.clear(); :}
            ;

item_char    ::= IDENT:i {: Compilador.declarar(i, "char"); :}
            |   IDENT:i ASIG {: Compilador.declarar(i, "char"); :} exp:e {: Compilador.asigAlternativo(i, e, cast); cast = ""; :}
            |   IDENT:i AC ENTERO:tam CC {: Compilador.declararArray(i, "char", tam); :}
            |   IDENT:i AC ENTERO:tam CC ASIG exp:e {: Compilador.declararArray(i, "char", tam); Compilador.asigArray(i, tam, e); :}
            |   IDENT:i AC ENTERO:tam CC ASIG ALL {: array = new ArrayList<>(); :} arrayLlaves CLL {: Compilador.declararArray(i, "char", tam); 
                                                                                                    Compilador.inicializarArray(i, array); array.clear(); :}
            ;

item_string ::= IDENT:i {: Compilador.declarar(i, "string"); :}
            |   IDENT:i ASIG exp:e {: Compilador.declarar(i, "string"); Compilador.asigString(i, e); :}
            ;

item_boolean ::= IDENT:i {: Compilador.declarar(i, "boolean"); :}
            |   IDENT:i ASIG exp:e {: Compilador.declarar(i, "boolean"); Compilador.asigAlternativo(i, e, cast); :}
            ;

asignacion  ::= IDENT:i ASIG exp:e {: Compilador.asigAlternativo(i, e, cast); cast = ""; 
                                      if(!Compilador.getTypeDefinitivo(i).equals("boolean")) RESULT = e; 
                                      else RESULT = i; :}
            |   IDENT:i AC exp:pos CC ASIG exp:e {: RESULT = e; Compilador.asigArray(i, pos, e); :}
            |   IDENT:i ASIG ALL {: array = new ArrayList<>(); :} arrayLlaves CLL {: RESULT = i; Compilador.inicializarArray(i, array); array.clear(); :}
            ;

while   ::= WHILE {: RESULT = Compilador.newEtiq(); :}
        ;

if  ::= IF {: RESULT = Compilador.newEtiq(); :}
    ;

do  ::= DO {: RESULT = Compilador.newEtiq(); :}
    ;

for ::= FOR {: RESULT = Compilador.generarTuplaEtiquetasString(); :}
    ;

arrayLlaves ::= arrayLlaves:a COMA exp:e {: array.add(e); :}
            |   exp:e {: array.add(e);  :}  
            ;

valor_booleano  ::= TRUE {: RESULT = "true"; :}
                |   FALSE {: RESULT = "false"; :}
                ;